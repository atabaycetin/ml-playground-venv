# -*- coding: utf-8 -*-
"""Lab02.V2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19RTcyz3mfRjpmJt2SH-s8yCyobWXZ5EU

# Lab 02: Training a Custom Model

**Objective of this lab**: training a small custom model on the Tiny-ImageNet dataset.
"""

import torch
import torch.nn as nn
import torchvision.transforms as T
import torchvision.datasets as datasets
from tqdm import tqdm
from torch.utils.data import DataLoader
import torch.optim.lr_scheduler as lr_scheduler

"""## Dataset preparation"""

"""We need to adjust the format of the val split of the dataset to be used with ImageFolder."""

# import os
# import shutil
#
# with open('tiny-imagenet/tiny-imagenet-200/val/val_annotations.txt') as f:
#     for line in f:
#         fn, cls, *_ = line.split('\t')
#         os.makedirs(f'tiny-imagenet/tiny-imagenet-200/val/{cls}', exist_ok=True)
#
#         shutil.copyfile(f'tiny-imagenet/tiny-imagenet-200/val/images/{fn}', f'tiny-imagenet/tiny-imagenet-200/val/{cls}/{fn}')
#
# shutil.rmtree('tiny-imagenet/tiny-imagenet-200/val/images')

train_transform = T.Compose([
    T.RandomResizedCrop(224, scale=(0.8, 1.0)),  # Added
    T.RandomHorizontalFlip(),  # Added
    T.RandomRotation(10),  # Added
    T.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),  # Added
    T.RandomPerspective(distortion_scale=0.2, p=0.5),  # Added
    T.ToTensor(),
    T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

val_transform = T.Compose([
    T.Resize(256),
    T.CenterCrop(224),
    T.ToTensor(),
    T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# root/{classX}/x001.jpg

tiny_imagenet_dataset_train = datasets.ImageFolder('tiny-imagenet/tiny-imagenet-200/train', transform=train_transform)
tiny_imagenet_dataset_val = datasets.ImageFolder('tiny-imagenet/tiny-imagenet-200/val', transform=val_transform)

print(f"Length of train dataset: {len(tiny_imagenet_dataset_train)}")
print(f"Length of val dataset: {len(tiny_imagenet_dataset_val)}")

# The following code also checks the number of samples per class
# from collections import Counter

# class_counts = Counter([target for _, target in tiny_imagenet_dataset_val])
# for class_label, count in class_counts.items():
#     print(f"Class {class_label}: {count} entries")

train_loader = DataLoader(tiny_imagenet_dataset_train, batch_size=128, shuffle=True)
val_loader = DataLoader(tiny_imagenet_dataset_val, batch_size=128, shuffle=False)

"""## Custom model definition"""

# ----------------------------
# Custom Model with Optional Residuals
# ----------------------------
class BasicBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1):
        super().__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1)
        self.bn2 = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)

        if stride != 1 or in_channels != out_channels:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=stride),
                nn.BatchNorm2d(out_channels)
            )
        else:
            self.shortcut = nn.Identity()

    def forward(self, x):
        out = self.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += self.shortcut(x)
        out = self.relu(out)
        return out

class CustomNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.layer1 = BasicBlock(3, 64)
        self.pool1 = nn.MaxPool2d(2, 2)

        self.layer2 = BasicBlock(64, 128, stride=2)  # Reduce spatial size
        self.pool2 = nn.MaxPool2d(2, 2)

        self.layer3 = BasicBlock(128, 256, stride=2)
        self.pool3 = nn.MaxPool2d(2, 2)

        self.gap = nn.AdaptiveAvgPool2d((1, 1)) # fix feature size mismatch using adaptive average global pooling
        self.fc = nn.Linear(256, 200) # 200 is the number of classes in TinyImageNet

    def forward(self, x):
        # Define forward pass
        # B x 3 x 224 x 224
        x = self.pool1(self.layer1(x))
        x = self.pool2(self.layer2(x))
        x = self.pool3(self.layer3(x))
        x = self.gap(x) # global average pooling
        x = torch.flatten(x, 1) # flatten before fully connected layer to correct the dimensions (batch size, 256)
        x = self.fc(x)
        return x

def train(epoch, model, train_loader, criterion, optimizer, device, scheduler, verbose=False):
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0

    loader = tqdm(train_loader, desc=f"Train Epoch {epoch}", leave=False) if verbose else train_loader

    for batch_idx, (inputs, targets) in enumerate(loader):
        inputs, targets = inputs.to(device), targets.to(device)

        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()

        running_loss += loss.item()
        _, predicted = outputs.max(1)
        total += targets.size(0)
        correct += predicted.eq(targets).sum().item()

    # added scheduler (just trying it out, comment it out if doesn't work) -----
    scheduler.step()                                                         # -
    # --------------------------------------------------------------------------

    train_loss = running_loss / len(train_loader)
    train_accuracy = 100. * correct / total
    print(f'Train Epoch: {epoch} Loss: {train_loss:.6f} Acc: {train_accuracy:.2f}%')

# Validation loop
def validate(model, val_loader, criterion, device, verbose=False):
    model.eval()
    val_loss = 0

    correct, total = 0, 0

    loader = tqdm(val_loader, desc="Validating", leave=False) if verbose else val_loader

    with torch.no_grad():
        for batch_idx, (inputs, targets) in enumerate(loader):
            inputs, targets = inputs.to(device), targets.to(device)

            outputs = model(inputs)
            loss = criterion(outputs, targets)

            val_loss += loss.item()
            _, predicted = outputs.max(1)
            total += targets.size(0)
            correct += predicted.eq(targets).sum().item()

    val_loss = val_loss / len(val_loader)
    val_accuracy = 100. * correct / total

    print(f'Validation Loss: {val_loss:.6f} Acc: {val_accuracy:.2f}%')
    return val_accuracy

def main():
    torch.set_float32_matmul_precision('high')
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    model = CustomNet().to(device)

    criterion = nn.CrossEntropyLoss(label_smoothing=0.1)
    optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.9)
    scheduler = lr_scheduler.CosineAnnealingLR(optimizer, T_max=100)

    best_acc, best_val_accuracy = 0, 0

    # Run the training process for {num_epochs} epochs
    num_epochs = 100
    for epoch in range(1, num_epochs + 1):
        train(epoch, model, train_loader, criterion, optimizer, device, scheduler, verbose=True)

        # At the end of each training iteration, perform a validation step
        val_accuracy = validate(model, val_loader, criterion, device, verbose=True)

        if val_accuracy > best_val_accuracy:
            best_val_accuracy = val_accuracy
            torch.save(model.state_dict(), 'best_model.pth')  # Save best model
            print(f'Best model saved with Acc={best_val_accuracy:.2f}%')
        # Best validation accuracy
        best_acc = max(best_acc, val_accuracy)

    print(f'Best validation accuracy: {best_acc:.2f}%')

    # save the model
    model_name = 'customnet_tinyimagenet.pth'
    torch.save(model.state_dict(), model_name)
    print(f"Model has been successfully saved as {model_name}")

if __name__ == '__main__':
    main()
    """
    Use the code snippet below to load the saved model and evaluate it 
    
    model = CustomNet().to(device)
    model.load_state_dict(torch.load('customnet_tinyimagenet.pth'))
    model.eval()
    """
